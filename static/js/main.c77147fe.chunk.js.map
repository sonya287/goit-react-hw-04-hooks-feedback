{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Notification.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","key","type","name","onClick","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","App","useState","setGood","setNeutral","setBad","countTotalFeedback","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAgBeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCmBQC,EAtBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,cAAC,EAAD,CAASJ,MAAO,wBAAhB,SACGK,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAG,OAC3B,wBACEC,KAAK,SAELC,KAAMF,EACNG,QAAS,kBAAMP,EAAgBI,IAJjC,SAMGA,GAJIA,SCCAI,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KC2BEC,EA1BI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,cAAC,EAAD,CAASnB,MAAO,aAAhB,SACGkB,EACC,+BACE,wCAAWH,KACX,2CAAcC,KACd,sCAASC,KACT,yCAAYC,KACZ,qDAAwBC,EAAxB,UAGF,cAAC,EAAD,CAAcN,QAAS,yBCZhB,SAASO,IACtB,MAAwBC,mBAAS,GAAjC,mBAAON,EAAP,KAAaO,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOL,EAAP,KAAgBO,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOJ,EAAP,KAAYO,EAAZ,KAqBMC,EAAqB,WACzB,OAAOV,EAAOC,EAAUC,GAO1B,OACE,qCACE,cAAC,EAAD,CACEd,QAAS,CAAEY,OAAMC,UAASC,OAC1Bb,gBA/BiB,SAAAK,GACrB,OAAQA,GACN,IAAK,OACHa,GAAQ,SAAAP,GAAI,OAAIA,EAAO,KACvB,MAEF,IAAK,UACHQ,GAAW,SAAAP,GAAO,OAAIA,EAAU,KAChC,MAEF,IAAK,MACHQ,GAAO,SAAAP,GAAG,OAAIA,EAAM,KACpB,MAEF,QACE,WAkBF,cAAC,EAAD,CACEF,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOO,IACPN,mBAdGO,KAAKC,MAAOZ,EAAOU,IAAwB,UC5BtDG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACV,EAAD,MAEFW,SAASC,eAAe,U","file":"static/js/main.c77147fe.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\nimport Section from '../Section';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <Section title={'Please leave feedback'}>\n      {Object.keys(options).map(key => (\n        <button\n          type=\"button\"\n          key={key}\n          name={key}\n          onClick={() => onLeaveFeedback(key)}\n        >\n          {key}\n        </button>\n      ))}\n    </Section>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.object.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import PropTypes from 'prop-types';\nimport Section from '../Section';\nimport Notification from './Notification';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <Section title={'Statistics'}>\n      {total ? (\n        <ul>\n          <li>Good: {good}</li>\n          <li>Neutral: {neutral}</li>\n          <li>Bad:{bad}</li>\n          <li>Total: {total}</li>\n          <li>Positive feedback: {positivePercentage}%</li>\n        </ul>\n      ) : (\n        <Notification message={'No feedback given'} />\n      )}\n    </Section>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import { useState } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleFeedback = type => {\n    switch (type) {\n      case 'good':\n        setGood(good => good + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(neutral => neutral + 1);\n        break;\n\n      case 'bad':\n        setBad(bad => bad + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good / countTotalFeedback()) * 100);\n  };\n\n  return (\n    <>\n      <FeedbackOptions\n        options={{ good, neutral, bad }}\n        onLeaveFeedback={handleFeedback}\n      />\n      <Statistics\n        good={good}\n        neutral={neutral}\n        bad={bad}\n        total={countTotalFeedback()}\n        positivePercentage={countPositiveFeedbackPercentage()}\n      />\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}